* Exercise 1.1

I'm using GCC as my compiler and Debian as my OS. Here are the
file extensions GCC uses for C++ source files:

#+BEGIN_EXAMPLE
.cc
.cp
.cxx
.cpp
.CPP
.c++
.C
#+END_EXAMPLE

I wrote the first program in the =prog1.cpp= file. I compile it with
=$ g++ -o prog1 prog1.cpp=. I execute the compiled program with
=$ ./prog1=, nothing happen as expected. I obtain the status with the
command =$ echo $?= and get =0= as expected.

#+INCLUDE: "prog1.cpp" src cpp

* Exercise 1.2

We change the return value to =-1= and save the modified program in the
file =prog2.cpp=. We compile it and run it and nothing happen as in the first program.
The status value I get after the command =$ echo $?= is =255=. It seems
any value returned by =main= is stored modulo $256 = 2^8$ on my system.

#+INCLUDE: "prog2.cpp" src cpp

* Exercise 1.3

#+INCLUDE: "hello_world.cpp" src cpp

* Exercise 1.4

#+INCLUDE: "product.cpp" src cpp

* Exercise 1.5

#+INCLUDE: "sum_separated_print_statements.cpp" src cpp

* Exercise 1.6

This program fragment is not legal because the first =<<= operator on the second line has no left operand.
For information, here is the error message from my compiler (GCC):

#+BEGIN_EXAMPLE
illegal_program_fragment.cpp: In function ‘int main()’:
illegal_program_fragment.cpp:11:15: error: expected primary-expression before ‘<<’ token
               << " and " << v2;
               ^~
illegal_program_fragment.cpp:12:15: error: expected primary-expression before ‘<<’ token
               << " is " << v1 + v2 << std::endl;
               ^~
#+END_EXAMPLE

To fix this program fragment we only need to remove the first two semicolons:

#+BEGIN_SRC cpp
std::cout << "The sum of " << v1
          << " and " << v2
          << " is " << v1 + v2 << std::endl;
#+END_SRC

* Exercise 1.7

#+INCLUDE: "incorrectly_nested_comments.cpp" src cpp

Here is my compiler message when trying to compile this illegal program:

#+BEGIN_EXAMPLE
incorrectly_nested_comments.cpp:9:6: error: expected unqualified-id before ‘/’ token
     */
      ^
incorrectly_nested_comments.cpp:11:1: error: expected declaration before ‘}’ token
 }
 ^
#+END_EXAMPLE

* Exercise 1.8

The two first statements are legal:
#+BEGIN_SRC cpp
std::cout << "/*"; // legal, "/*" is treated as a string literal
std::cout << "*/"; // legal, "/*" is also treated as a string literal
#+END_SRC

Comment pairs cannot nest, as a result the third statement is equivalent to:
#+BEGIN_SRC cpp
std::cout << " */;
#+END_SRC
And this statement is not legal as the second operand of =<<= makes no sense.

Using the same property of comment pairs, the last statement is equivalent to:
#+BEGIN_SRC cpp
std::cout << " /* ";
#+END_SRC
And this statement is legal, the second operand is a valid string literal.

* Exercise 1.9

#+INCLUDE: "sum_50_to_100.cpp" src cpp

* Exercise 1.10

#+INCLUDE: "count_ten_to_zero.cpp" src cpp

* Exercise 1.11

#+INCLUDE: "print_range.cpp" src cpp

* Exercise 1.12

This =for= loop adds the number from -100 to 100 to the variable =sum=. The final value of =sum= is 0.

* Exercise 1.13

** exercise 1.9 with =for= loop:

#+INCLUDE: "sum_50_to_100_with_for.cpp" src cpp

** exercise 1.10 with =for= loop:

#+INCLUDE: "count_ten_to_zero_with_for.cpp" src cpp

** exercise 1.11 with =for= loop

#+INCLUDE: "print_range_with_for.cpp" src cpp

* Exercise 1.14

Loops that used a =for= are generally more conscise especially when we are itterating over a range of numbers.
=for= loops also make it clear that a variable is only used as a loop index.

* Exercise 1.15

** Syntax error

#+INCLUDE: "syntax_error.cpp" src cpp

Error message:

#+BEGIN_EXAMPLE
syntax_error.cpp:8:18: warning: missing terminating " character
     std::cout << "Hello, World << std::endl;
                  ^
syntax_error.cpp:8:18: error: missing terminating " character
     std::cout << "Hello, World << std::endl;
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
syntax_error.cpp: In function ‘int main()’:
syntax_error.cpp:9:5: error: expected primary-expression before ‘return’
     return 0;
     ^~~~~~
#+END_EXAMPLE

** Type error

#+INCLUDE: "type_error.cpp" src cpp

The error message from my compiler:

#+BEGIN_EXAMPLE
type_error.cpp: In function ‘int main()’:
type_error.cpp:6:12: error: invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]
     return "0";
            ^~~
#+END_EXAMPLE

** Declaration error

#+INCLUDE: "declaration_error.cpp" src cpp

Error message associated:

#+BEGIN_EXAMPLE
declaration_error.cpp:7:36: error: ‘endl’ was not declared in this scope
     std::cout << "Hello, World" << endl;
                                    ^~~~
declaration_error.cpp:7:36: note: suggested alternative:
In file included from /usr/include/c++/8/iostream:39,
                 from declaration_error.cpp:3:
/usr/include/c++/8/ostream:590:5: note:   ‘std::endl’
     endl(basic_ostream<_CharT, _Traits>& __os)
     ^~~~
#+END_EXAMPLE

* Exercise 1.16

#+INCLUDE: "sum_integers_cin.cpp" src cpp

* Exercise 1.17

If the input values are all equal, the program will print one line with number of times we entered the value.
If there are no duplicated values the program will output one line for each number entered with a count of 1 each time.

* Exercise 1.18

This exercise verify our answer from the previous exercise.

If the input is =2 2 2 2 2 2= the program prints =2 occurs 6 times=.

If the input is =1 2 3 4 5 6= the program prints:
#+BEGIN_EXAMPLE
1 occurs 1 times
2 occurs 1 times
3 occurs 1 times
4 occurs 1 times
5 occurs 1 times
6 occurs 1 times
#+END_EXAMPLE

* Exercise 1.19

#+INCLUDE: "print_range_revised.cpp" src cpp

* Exercise 1.20

#+INCLUDE: "book_transactions_print.cpp" src cpp

* Exercise 1.21

#+INCLUDE: "sum_two_sales_item.cpp" src cpp

* Exercise 1.22

#+INCLUDE: "sum_sales_item.cpp" src cpp

* Exercise 1.23

#+INCLUDE: "consecutive_count_ISBN.cpp" src cpp

* Exercise 1.24

Here is my transactions used as input for the previous program:
#+BEGIN_EXAMPLE
0-201-78345-X 3 20.00
0-201-78345-X 2 25.00
0-201-70353-X 4 24.99
0-201-70353-X 2 10.99
0-201-70353-X 1 40.00
#+END_EXAMPLE

The program outputs:
#+BEGIN_EXAMPLE
0-201-78345-X ISBN occurs 2 times
0-201-70353-X ISBN occurs 3 times
#+END_EXAMPLE

* Exercise 1.25

#+INCLUDE "bookstore.cpp" src cpp

Using the same input as in the previous exercise we get:

#+BEGIN_EXAMPLE
0-201-78345-X 5 110 22
0-201-70353-X 7 161.94 23.1343
#+END_EXAMPLE
