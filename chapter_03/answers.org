* Exercise 3.1

#+INCLUDE: "sum_50_100_using.cpp" src cpp

* Exercise 3.2

#+INCLUDE: "read_line.cpp" src cpp

#+INCLUDE: "read_word.cpp" src cpp

* Exercise 3.3

With the =string= input operator, both leading spaces and trailing whitespaces are discarded but no whitespace is discard with =getline=.

* Exercise 3.4

#+INCLUDE: "string_comparison.cpp" src cpp

#+INCLUDE: "string_comparison_bis.cpp" src cpp

* Exercise 3.5

#+INCLUDE: "concatenate.cpp" src cpp

#+INCLUDE: "concatenate_bis.cpp" src cpp

* Exercise 3.6

#+INCLUDE: "to_X.cpp" src cpp

* Exercise 3.7

I think it would not mutate the =string= as we would modify only a copy of each character.

Here is the previous program modified. With some compiler options we get a warning.

#+INCLUDE: "do_nothing.cpp" src cpp

The output is the =string= unmodified as expected.

* Exercise 3.8

#+INCLUDE: "to_X_while.cpp" src cp

#+INCLUDE: "to_X_traditional_for.cpp" src cpp

I prefer the range =for= approach as it is less error prone (no need to take care of bounds), it's faster to write and easier to read.

* Exercise 3.9

This program is not valid because =s= is initialized to the empty =string= so we can't use the subscript operator (it's undefined behavior).

* Exercise 3.10

#+INCLUDE: "remove_punctuation.cpp" src cpp

* Exercise 3.11

Yes this range =for= is legal. The type of =c= is =const int&=, we can't test this by trying to assign to =c= and see the compiler error.

* Exercise 3.12

(a) Legal, =ivec= is initialized to an empty =vector= of =vector<int>=.

(b) Illegal, =svec= hold strings not vectors of =int=.

(c) Legal, =svec= is initialized to a =vector= of ten strings of value ="null"=.

* Exercise 3.13

(a) No elements.

(b) Ten elements, each of value $0$.

(c) Ten elements, each of value $42$.

(d) One element of value $10$.

(e) Two elements, the first one of value $10$ and the second with the value $42$.

(f) Ten elements, each is the empty =string=.

(g) Ten elements, each is the =string= ="hi"=.

* Exercise 3.14

#+INCLUDE: "store_ints.cpp" src cpp

* Exercise 3.15

#+INCLUDE: "store_strings.cpp" src cpp

* Exercise 3.16

#+INCLUDE: "check_vectors.cpp" src cpp

* Exercise 3.17

#+INCLUDE: "print_words.cpp" src cpp

* Exercise 3.18

This program is illegal. We might fix it by using the =push_back= member function:

#+BEGIN_SRC cpp
vector<int> ivec;
ivec.push_back(42);
#+END_SRC

* Exercise 3.19

#+INCLUDE: "three_ways.cpp" src cpp

The first way is preferred as it's easier to read and more safe.

* Exercise 3.20

#+INCLUDE: "adjacent_pair_sum.cpp" src cpp

#+INCLUDE: "symmetric_sum.cpp" src cpp

* Exercise 3.21

#+INCLUDE: "print_size_content.cpp" src cpp

* Exercise 3.22

#+INCLUDE: "print_text_uppercase.cpp" src cpp

* Exercise 3.23

#+INCLUDE: "twice_iterator.cpp" src cpp

* Exercise 3.24

#+INCLUDE: "adjacent_pair_sum_iterator.cpp" src cpp

#+INCLUDE: "symmetric_sum_iterator.cpp" src cpp

* Exercise 3.25

#+INCLUDE: "grades_clusters.cpp" src cpp

* Exercise 3.26

If we wrote =mid = (beg + end) / 2;= the program could never end if the value is not found (=mid= could not change and never be equal to =end=).

* Exercise 3.27

(a) Illegal, =buf_size= is not a constant expression.

(b) Legal, =4 * 7 - 14= is a constant expression with value greater than $0$.

(c) Illegal, =txt_size()= is not a constant expression.

(d) Illegal, =st= must be able to also hold the null character ='\0'= so must be at least able to store $12$ characters.

* Exercise 3.28

=sa= is an array of $10$ empty strings.
=ia= is an array of $10$ zero ints.
=sa2= is an array of $10$ empty strings.
=ia2= is an array of $10$ ints with undefined values.

* Exercise 3.29

Arrays can only store a fix amount of values, the size must be known at compile time and arrays can't be of $0$ size.

* Exercise 3.30

=ia= is an array of size =10= so the valid subscript values are positive integers strictly inferior to =10=. Here in the last execution of the =for= loop we are using a subscript equal to =10= hence the undefined behavior of this code.

* Exercise 3.31

#+INCLUDE: "array_of_positions.cpp" src cpp

* Exercise 3.32

#+INCLUDE: "copy_array.cpp" src cpp

#+INCLUDE: "copy_vector.cpp" src cpp

* Exercise 3.33

The behavior of the program would be undefined.

* Exercise 3.34

This code assign =p2= to =p1=, this code is always legal as long as =p1= and =p2= are valid pointers.

* Exercise 3.35 

#+INCLUDE: "set_to_zero.cpp" src cpp

* Exercise 3.36

#+INCLUDE: "array_equality.cpp" src cpp

#+INCLUDE: "vector_equality.cpp" src cpp

* Exercise 3.37

This program has undefined behavior because it will try to read past the end of the array so anything can happen.

* Exercise 3.38

It's meaningless because if we think of pointers as addresses of array elements, subtracting two addresses would give the offset and could be useful information but adding two addresses would make no sense as it would generally depend on the address of the first element of the array.

* Exercise 3.39 

#+INCLUDE: "compare_strings.cpp" src cpp

#+INCLUDE: "compare_cstrings.cpp" src cpp

* Exercise 3.40

#+INCLUDE: "cstrings_cat.cpp" src cpp

* Exercise 3.41

#+INCLUDE: "vector_from_array.cpp" src cpp

* Exercise 3.42

#+INCLUDE: "array_from_vector.cpp" src cpp

* Exercise 3.43

#+INCLUDE: "for_loop.cpp" src cpp

* Exercise 3.44

#+INCLUDE: "for_loop_type_alias.cpp" src cpp

* Exercise 3.45

#+INCLUDE: "for_loop_auto.cpp" src cpp
